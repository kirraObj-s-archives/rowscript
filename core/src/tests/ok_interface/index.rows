function numAdd(a: number, b: number): number;
function numMul(a: number, b: number): number;

interface NatLike {
    add(a: NatLike, b: NatLike): NatLike;
    mul(a: NatLike, b: NatLike): NatLike;
}

type Foo = {n: number};

implements NatLike for Foo {
    add(a: Foo, b: Foo): Foo {
        return {n: numAdd(a.n, b.n)}
    }

    mul(a: Foo, b: Foo): Foo {
        return {n: numMul(a.n, b.n)}
    }
}

type Bar = {m: number};

implements NatLike for Bar {
    add(a: Bar, b: Bar): Bar { return {m: numAdd(a.m, b.m)} }
    mul(a: Bar, b: Bar): Bar { return {m: numMul(a.m, b.m)} }
}

function f(): number {
    return add({n: 42}, {n: 69}).n
}
