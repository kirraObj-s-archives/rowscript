WHITESPACE = _{ WHITE_SPACE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

pub_camelback_id = @{ ASCII_ALPHA_LOWER ~ (ASCII_ALPHA | ASCII_DIGIT)* }
priv_camelback_id = @{ "_" ~ pub_camelback_id }

pub_camel_id = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHA | ASCII_DIGIT)* }
priv_camel_id = @{ "_" ~ pub_camel_id }

fn_id = { pub_camelback_id | priv_camelback_id }
row_id = @{ "'" ~ pub_camel_id }
implicit_id = { pub_camel_id }
type_id = { pub_camel_id | priv_camel_id }
class_id = { pub_camel_id | priv_camel_id }
prop_id = { pub_camelback_id | priv_camelback_id }
variant_id = { pub_camel_id | priv_camel_id }
field_id = _{ prop_id | variant_id }
param_id = { pub_camelback_id }
let_id = { pub_camelback_id }

idref =
  { fn_id
  | param_id
  | let_id
  | prop_id
  }
tyref =
  { implicit_id
  | type_id
  }

hole = { "?" }

string = @{ "\"" ~ (unescaped_string_fragment | escaped_string_fragment)* ~ "\"" }
unescaped_string_fragment = @{ (!("\"" | "\\") ~ ANY)+ }
escaped_string_fragment =
 @{ "\\"
  ~ ( !("x" | "u" | ASCII_OCT_DIGIT)
    | ASCII_OCT_DIGIT{1,3}
    | "x" ~ ASCII_HEX_DIGIT{2}
    | "u" ~ ASCII_HEX_DIGIT{4}
    | "u{" ~ ASCII_HEX_DIGIT+ ~ "}"
    )
  }

number =
  { binary_number
  | octal_number
  | hex_number
  | decimal_number
  }
bigint = @{ (binary_number | octal_number | hex_number | decimal_digits) ~ "n" }
binary_number = @{ ("0b" | "0B") ~ ASCII_BIN_DIGIT ~ ("_"? ~ ASCII_BIN_DIGIT)* }
octal_number = @{ ("0o" | "0O") ~ ASCII_OCT_DIGIT ~ ("_"? ~ ASCII_OCT_DIGIT)* }
hex_number = @{ ("0x" | "0X") ~ ASCII_HEX_DIGIT ~ ("_"? ~ ASCII_HEX_DIGIT)* }
decimal_number =
 @{ decimal_digits
  | decimal_integer ~ exponent_part
  | "." ~ decimal_digits ~ (exponent_part)?
  | decimal_integer ~ "." ~ decimal_digits? ~ exponent_part?
  }
decimal_digits = @{ ASCII_DIGIT ~ ("_"? ~ ASCII_DIGIT)* }
exponent_part = @{ ("e" | "E")? ~ ("-" | "+")? ~ decimal_digits }
decimal_integer = @{ "0" | "0"? ~ ASCII_NONZERO_DIGIT ~ ("_"? ~ decimal_digits)? }

implicit_ids = _{ implicit_id ~ ("," ~ implicit_id)* }
row_ids = _{ row_id ~ ("," ~ row_id)* }
implicits =
 _{ "<" ~ row_ids ~ ">"
  | "<" ~ implicit_ids ~ ">"
  | "<" ~ row_ids ~ "," ~ implicit_ids ~ ">"
  }

param = { param_id ~ ":" ~ type_expr }
params = _{ "()" | "(" ~ param ~ ("," ~ param)* ~ ")" }

field = { field_id ~ ":" ~ type_expr }
property = { prop_id ~ ":" ~ type_expr }
label = { prop_id ~ ":" ~ expr }
variant = { variant_id ~ (":" ~ type_expr)? }

type_expr =
  { fn_type
  | string_type
  | number_type
  | bigint_type
  | boolean_type
  | unit_type
  | object_type_ref
  | object_type_literal
  | enum_type_ref
  | enum_type_literal
  | type_app
  | tyref
  | paren_type_expr
  | hole
  | row_id
  }
paren_type_expr = { "(" ~ type_expr ~ ")" }
fn_type = { params ~ "->" ~ type_expr }
string_type = { "string" }
number_type = { "number" }
bigint_type = { "bigint" }
boolean_type = { "boolean" }
unit_type = { "unit" }
object_type_ref = { "{" ~ row_id ~ "}" }
object_type_literal = { "{" ~ property ~ ("," ~ property)* ~ "}" }
enum_type_ref = { "[" ~ row_id ~ "]" }
enum_type_literal = { "[" ~ variant ~ ("|" ~ variant)* ~ "]" }
type_app = { ("(" ~ type_expr ~ ")" | tyref) ~ implicit_args? }

expr =
  { string
  | number
  | bigint
  | boolean_false
  | boolean_true
  | boolean_if
  | object_literal
  | object_concat
  | object_access
  | object_cast
  | enum_variant
  | enum_cast
  | enum_switch
  | new_expr
  | lambda_expr
  | app
  | tt
  | idref
  | paren_expr
  | hole
  }
boolean_false = { "false" }
boolean_true = { "true" }
boolean_if =
  { "if" ~ "(" ~ expr ~ ")"
  ~ "{" ~ branch ~ "}"
  ~ "else" ~ "{" ~ branch ~ "}"
  }
branch = { branch_let | expr }
branch_let = { "let" ~ param_id ~ (":" ~ type_expr)? ~ "=" ~ expr ~ ";" ~ branch }
new_expr = { "new" ~ class_id ~ ("<" ~ type_args ~ ">")? ~ args }
lambda_expr = { lambda_params ~ "=>" ~ lambda_body }
lambda_params = _{ "()" | param_id | "(" ~ param_id ~ ("," ~ param_id)+ ~ ")" }
lambda_body = { expr | fn_body_block }
app = { ("(" ~ expr ~ ")" | idref) ~ implicit_args? ~ args+ }
implicit_args =
 _{ "<" ~ row_args ~ ">"
  | "<" ~ type_args ~ ">"
  | "<" ~ row_args ~ "," ~ type_args ~ ">"
  }
type_args = _{ type_arg ~ ("," ~ type_arg)* }
type_arg = { (tyref ~ "=")? ~ type_expr }
row_args = _{ row_arg ~ ("," ~ row_arg)* }
row_arg = { (row_id ~ "=")? ~ paren_fields }
args = { "()" | "(" ~ expr ~ ("," ~ expr)* ~ ")" }
tt = { "()" }
object_literal = { "{" ~ label ~ ("," ~ label)* ~ "}" }
object_concat = { object_operand ~ "..." ~ object_operand }
object_access = { object_operand ~ "." ~ prop_id ~ args* }
object_cast = { "{" ~ "..." ~ object_operand ~ "}" }
object_operand =
  { app
  | object_literal
  | idref
  | paren_expr
  }
enum_variant = { variant_id ~ paren_expr? }
enum_cast = { "[" ~ "..." ~ enum_operand ~ "]" }
enum_operand =
  { app
  | enum_variant
  | idref
  | paren_expr
  }
enum_switch = { "switch" ~ paren_expr ~ "{" ~ enum_case+ ~ "}" }
enum_case = { "case" ~ variant_id ~ ("(" ~ param_id ~ ")")? ~ ":" ~ expr }
paren_expr = { "(" ~ expr ~ ")" }

row_preds = _{ "where" ~ row_pred ~ ("," ~ row_pred)* }
row_pred =
  { row_ord
  | row_eq
  }
row_ord = { row_expr ~ (row_le | row_ge) ~ row_expr }
row_le = { "<:" }
row_ge = { ":>" }
row_eq = { row_expr ~ "=" ~ row_expr }
row_expr =
  { row_concat
  | row_primary_expr
  }
row_primary_expr =
  { row_id
  | paren_fields
  | paren_row_expr
  }
paren_fields = { "(" ~ field ~ ("," ~ field)* ~ ")" }
row_concat = { row_primary_expr ~ "+" ~ row_expr }
paren_row_expr = { "(" ~ row_expr ~ ")" }

fn_def =
  { "function"
  ~ fn_id
  ~ implicits?
  ~ params
  ~ (":" ~ type_expr)?
  ~ row_preds?
  ~ fn_body_block
  }
fn_body_block = _{ "{" ~ fn_body ~ "}" }
fn_body = { fn_body_let | fn_body_ret }
fn_body_let = { "let" ~ param_id ~ (":" ~ type_expr)? ~ "=" ~ expr ~ ";" ~ fn_body }
fn_body_ret = { "return" ~ expr? }

fn_postulate =
  { "function"
  ~ fn_id
  ~ ("<" ~ implicit_ids ~ ">")?
  ~ params
  ~ (":" ~ type_expr)?
  ~ ";"
  }

type_postulate = { "type" ~ type_id ~ ";" }

type_alias =
  { "type"
  ~ type_id
  ~ implicits?
  ~ "="
  ~ type_expr
  ~ ";"
  }

class_def =
  { "class"
  ~ class_id
  ~ ("<" ~ implicit_ids ~ ">")?
  ~ "{"
  ~ class_member*
  ~ class_method*
  ~ "}"
  }
class_member = { prop_id ~ ":" ~ type_expr ~ ";" }
class_method = { fn_id ~ params ~ (":" ~ type_expr)? ~ fn_body_block }

decl =
 _{ fn_def
  | fn_postulate
  | type_postulate
  | type_alias
  | class_def
  }

file = { SOI ~ decl* ~ EOI }
