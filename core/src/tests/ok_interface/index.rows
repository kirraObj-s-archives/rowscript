function numAdd(a: number, b: number): number;
function numMul(a: number, b: number): number;

type Foo = {n: number};

interface NatLike for T {
    add(a: T, b: T): T;
    mul(a: T, b: T): T;
}

implements NatLike for Foo {
    add(a: Foo, b: Foo): Foo {
        return {n: numAdd(a.n, b.n)}
    }

    mul(a: Foo, b: Foo): Foo {
        return {n: numMul(a.n, b.n)}
    }
}

function f0(): number {
    return add({n: 42}, {n: 69}).n
}

function f1(): number {
    return f0()
}

interface Default for T { pure(): T; }
implements Default for Foo { pure(): Foo { return {n: 0} } }
function g0(): Foo { return pure() }
function g1(): Foo { return g0() }
